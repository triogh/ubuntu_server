Ansible Documentation
***

Title: how-to-install-and-configure-ansible-on-an-ubuntu-12-04-vps
===
Source: https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-ansible-on-an-ubuntu-12-04-vps

Added: Thu Dec  1 16:47:12 CET 2016
Created: PostedFebruary 6, 2014 


Introduction
+++

Configuration management systems are designed to make controlling large numbers of servers easy for administrators and operations teams. They allow you to control many different systems in an automated way from one central location.

While there are many popular configuration management systems available for Linux systems, such as Chef and Puppet, these are often more complex than many people want or need. Ansible is a great alternative to these options because it has a much smaller overhead to get started.

In this guide, we will discuss how to install Ansible on an Ubuntu 12.04 machine and go over some basics of how to use the software.


How Does Ansible Work?
+++

Ansible works by configuring client machines from an computer with Ansible components installed and configured.

It communicates over normal SSH channels in order to retrieve information from remote machines, issue commands, and copy files. Because of this, an Ansible system does not require any additional software to be installed on the client computers.

This is one way that Ansible simplifies the administration of servers. Any server that has an SSH port exposed can be brought under Ansible's configuration umbrella, regardless of what stage it is at in its life cycle.

Any computer that you can administer through SSH, you can also administer through Ansible.

Ansible takes on a modular approach, making it easy to extend to use the functionalities of the main system to deal with specific scenarios. Modules can be written in any language and communicate in standard JSON.

Configuration files are mainly written in the YAML data serialization format due to its expressive nature and its similarity to popular markup languages. Ansible can interact with clients through either command line tools or through its configuration scripts called Playbooks.


Install Ansible on an Ubuntu 12.04 VPS
+++

To begin exploring Ansible as a means of managing our various servers, we need to install the Ansible software on at least one machine. 

MY_NOTE:
Ansible is now available in the default Ubuntu repositories, so there is no need for additional third party repos.


        #
        sudo apt-get update
        sudo apt-get install ansible


Set Up SSH Keys
+++

As we mentioned above, Ansible primarily communicates with client computers through SSH. While it certainly has the ability to handle password-based SSH authentication, SSH keys help keep things simple.

We can set up SSH keys in two different ways depending on whether you already have a key you want to use. We will assume that the servers you want to be administering will be DigitalOcean droplets.


Create a New SSH Key Pair
---

If you do not already have an SSH key pair that you would like to use for Ansible administration, we can create one now on your Ansible VPS.

We will create an SSH key pair on our Ansible droplet to authenticate with the hosts that it will administer.

As the user you will be controlling Ansible with, create an RSA key-pair by typing:

ssh-keygen
~~~

        #
        ssh-keygen


You will be asked to specify the file location of the created key pair, a passphrase, and the passphrase confirmation. Press ENTER through all of these to accept the default values.

Your new keys are available in your user's ~/.ssh directory. The public key (the one you can share) is called id_rsa.pub. The private key (the one that you keep secure) is called id_rsa.


You can add them to your DigitalOcean control panel to allow you to embed your SSH key into newly created droplets. This will allow your Ansible droplet to SSH into your new droplets immediately, without any other authentication.

To do this, click on the "SSH Keys" link on the left-hand navigation menu. In the new screen, click on the "Add SSH Key" button in the top-right corner:


Enter the name you want associated with this key into the top field. On your Ansible VPS instance, type this to get the contents of your public key:


        #
        cat ~/.ssh/id_rsa.pub
        ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzmGgsqjSFuOBbjZB1sgquKpp3Ty+FgqoLrzjKbbk9VGOH6kM37aAhyxxmTQfe69lhYi/WCai+mrXOyY9IiQbUfZ4jsfPE9DS3zHhmnGiBWA7pedCTJ/Nhf06dmhAJIbExW3uDghbPbzbSA5Ihn1x0F5FXtSMDoFtyjcwUwJxc2z/kk9TKcFSl8qqf4IYBYE7c+EKaYRBjjDP4AQmiwjTPuipsmub7C0OGF0dTMatIa0lok6rwy91nmhCQV6polG0+Fsk4YrY8Yh5xz6wE0lOvc8BwP9nL0zsnw6Ey0MHV9BbMqtyD6x/fCurpIkMHJK4nv79rToSWA0AwoP/bJXh7 demo@ansible0


The string that is given back to you is what you need to paste in the second field in the DigitalOcean control panel:


Click "Create SSH Key" to add your key to the control panel. Now, whenever you create a new droplet, you will be able to embed your public SSH key into the new server, allowing you to communicate with your Ansible instance. You just need to select the key in the "Add optional SSH Keys" section of the droplet creation process:


Transfer an Existing SSH Key Pair to Ansible
---

If you already have a SSH key pair that you are using to authenticate with your droplets, you can transfer the credentials to your new Ansible droplet instead of creating a new pair. This has the advantage of making it automatically work with any servers you have already configured to use the key.

On the computer where you have configured SSH key authentication for your droplets, get the public key by typing:


        #
        cat ~/.ssh/id_rsa.pub
        ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzmGgsqjSFuOBbjZB1sgquKpp3Ty+FgqoLrzjKbbk9VGOH6kM37aAhyxxmTQfe69lhYi/WCai+mrXOyY9IiQbUfZ4jsfPE9DS3zHhmnGiBWA7pedCTJ/Nhf06dmhAJIbExW3uDghbPbzbSA5Ihn1x0F5FXtSMDoFtyjcwUwJxc2z/kk9TKcFSl8qqf4IYBYE7c+EKaYRBjjDP4AQmiwjTPuipsmub7C0OGF0dTMatIa0lok6rwy91nmhCQV6polG0+Fsk4YrY8Yh5xz6wE0lOvc8BwP9nL0zsnw6Ey0MHV9BbMqtyD6x/fCurpIkMHJK4nv79rToSWA0AwoP/bJXh7 demo@ansible0


On your Ansible server, you need to create a hidden directory to store your keys. Call it .ssh so that the SSH program knows where to find it:


        #
        mkdir ~/.ssh


We should lock access to this directory down so that only you can enter or write to it:


        #
        chmod 700 ~/.ssh


Now, move into the directory and open a file called id_rsa.pub in your text editor:


        #
        cd ~/.ssh
        nano id_rsa.pub


Paste the output of your public key from your home computer into this file:


        #
        ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDzmGgsqjSFuOBbjZB1sgquKpp3Ty+FgqoLrzjKbbk9VGOH6kM37aAhyxxmTQfe69lhYi/WCai+mrXOyY9IiQbUfZ4jsfPE9DS3zHhmnGiBWA7pedCTJ/Nhf06dmhAJIbExW3uDghbPbzbSA5Ihn1x0F5FXtSMDoFtyjcwUwJxc2z/kk9TKcFSl8qqf4IYBYE7c+EKaYRBjjDP4AQmiwjTPuipsmub7C0OGF0dTMatIa0lok6rwy91nmhCQV6polG0+Fsk4YrY8Yh5xz6wE0lOvc8BwP9nL0zsnw6Ey0MHV9BbMqtyD6x/fCurpIkMHJK4nv79rToSWA0AwoP/bJXh7 demo@ansible0



Save and close the file. We will make sure that this file has the correct permissions by typing:


        #
        chmod 644 id_rsa.pub


Now, back on your local computer that is configured for SSH key access, type:


        #
        cat ~/.ssh/id_rsa
        -----BEGIN RSA PRIVATE KEY-----
        MIIEpgIBAAKCAQEA85hoLKo0hbjgW42QdbIKriqad08vhYKqC684ym25PVRjh+pD
        N+2gIcl8Zk0H3uvZYWIv1gmsfpq1zsmPSIkG1H2eI7HzxPQ0qMx4ZpxogVgO6XnQ
        kyfzYX9OnZoQCSGxMVt7g4IWz2820gOSIZ9cdBeRV7UjA6Bbco3MFMCcXNs/5JPU
        ynBUpfKqn+CGAWBO3PhCmmEQY4wz+AEJosI0z7oqbJrm/AtDhhdHUzGrSGtJaJOq
        . . .
        . . .
        cqsqOEzXAoGBAPMJJ8RrKUBuSjVNkzebst9sBgNadmaoQUoMHUDr8KpCZhWAoHB7
        1VKmq7VSphQSruI31qy2M88Uue1knC/nQr1bE1DITZgezETSsDqsAMBo8bqDN6TT
        qVJgG+TS9BRC+IowuzMVV5mzrfJjkrb+GG+xWSXrTLZMbeeTf+D0SfVo
        -----END RSA PRIVATE KEY-----


The output will be quite long.

Back on your Ansible droplet, we need to create a new file in the ~/.ssh directory:


        #
        nano id_rsa


Inside, paste the results of the previous command on your local computer:


        #
        -----BEGIN RSA PRIVATE KEY-----
        MIIEpgIBAAKCAQEA85hoLKo0hbjgW42QdbIKriqad08vhYKqC684ym25PVRjh+pD
        N+2gIcl8Zk0H3uvZYWIv1gmsfpq1zsmPSIkG1H2eI7HzxPQ0qMx4ZpxogVgO6XnQ
        kyfzYX9OnZoQCSGxMVt7g4IWz2820gOSIZ9cdBeRV7UjA6Bbco3MFMCcXNs/5JPU
        ynBUpfKqn+CGAWBO3PhCmmEQY4wz+AEJosI0z7oqbJrm/AtDhhdHUzGrSGtJaJOq
        . . .
        . . .
        cqsqOEzXAoGBAPMJJ8RrKUBuSjVNkzebst9sBgNadmaoQUoMHUDr8KpCZhWAoHB7
        1VKmq7VSphQSruI31qy2M88Uue1knC/nQr1bE1DITZgezETSsDqsAMBo8bqDN6TT
        qVJgG+TS9BRC+IowuzMVV5mzrfJjkrb+GG+xWSXrTLZMbeeTf+D0SfVo
        -----END RSA PRIVATE KEY-----


Make sure that you include the first and last marker lines. They are required in order for the key file to be valid. Save and close the file.

We need to change the permissions to keep this file secure:


        #
        chmod 600 id_rsa


At this point, Ansible will be able to use these SSH keys to communicate with any servers that have the key embedded.


MY_NOTE:
When testing with a Vagrant box, I just copied the ssh public key from the host machine to the ".ssh/authorized_keys" file in the Vagrant box, and restarted the ssh daemon. Then I can connect with the command below.


        #
        $ ssh vagrant@127.0.0.1 -p2222


Configuring Ansible Hosts
+++

Ansible keeps track of all of the servers that it knows about through a "hosts" file. We need to set up this file first before we can begin to communicate with our other computers.

Open the file with root privileges like this:


        #
        sudo nano /etc/ansible/hosts


You will see a file that has a lot of example configurations, none of which will actually work for us since these hosts are made up. So to start, let's comment out all of the lines in this file by adding a "#" before each line.

We will keep these examples in the file to help us with configuration if we want to implement more complex scenarios in the future.

Once all of the lines are commented out, we can begin adding our actual hosts.

The hosts file is fairly flexible and can be configured in a few different ways. The syntax we are going to use though looks something like this:


        #
        [group_name]
        alias ansible_ssh_host=server_ip_address


The group_name is an organizational tag that lets you refer to any servers listed under it with one word. The alias is just a name to refer to that server.

So in our scenario, we are imagining that we have three servers we are going to control with Ansible. These servers are accessible from the Ansible droplet by typing:


        #
        ssh root@server_ip_address


You should not be prompted for a password if you have set this up correctly. We will assume that our droplets' IP addresses are 192.0.2.1, 192.0.2.2, and 192.0.2.3. We will set this up so that we can refer to these individually as host1, host2, and host3, or as a group as droplets.

This is the block that we should add to our hosts file to accomplish this:


        #
        [droplets]
        host1 ansible_ssh_host=192.0.2.1
        host2 ansible_ssh_host=192.0.2.2
        host3 ansible_ssh_host=192.0.2.3



MY_NOTE:
This is what I did on my test host machine, so that I could reach the Vagrant box I created previously, and where I copied the public ssh key, into the authorized_keys file on the Vagrant box.


        #
        [test_group]
        test_machine ansible_host=127.0.0.1 ansible_port=2222 ansible_user=vagrant


Relevant Ansible docs for the inventory file.
http://docs.ansible.com/ansible/intro_inventory.html


        #
        $ ansible all -m ping
        test_machine | SUCCESS => {
            "changed": false, 
            "ping": "pong"
        }



Hosts can be in multiple groups and groups can configure parameters for all of their members. Let's try this out now.

With our current settings, if we tried to connect to any of these hosts with Ansible, the command would fail (assuming you are not operating as the root user). This is because your SSH key is embedded for the root user on the remote systems and Ansible will by default try to connect as your current user. A connection attempt will get this error:


        #
        host1 | FAILED => SSH encountered an unknown error during the connection. We recommend you re-run the command using -vvvv, which will enable SSH debugging output to help diagnose the issue


In my Ansible computer, I'm using a user called demo. Ansible will try to connect to each host with ssh demo@server. This will not work if the demo user is not on the remote system.

We can create a file that tells all of the servers in the "droplets" group to connect using the root user.

To do this, we will create a directory in the Ansible configuration structure called group_vars. Within this folder, we can create YAML-formatted files for each group we want to configure:

/etc/ansible/group_vars
---

/etc/ansible/group_vars/droplet
---

        #
        sudo mkdir /etc/ansible/group_vars
        sudo nano /etc/ansible/group_vars/droplets

We can put our configuration in here. YAML files start with "---", so make sure you don't forget that part.


ansible_ssh_user: root
---

        #
		#
        ---
        ansible_ssh_user: root



Save and close this file when you are finished.

If you want to specify configuration details for every server, regardless of group association, you can put those details in a file at: 


/etc/ansible/group_vars/all
---

        #
        /etc/ansible/group_vars/all 


Individual hosts can be configured by creating files under a directory at 

/etc/ansible/host_vars
---

        #
        /etc/ansible/host_vars


Using Simple Ansible Commands
+++

Now that we have our hosts set up and enough configuration details to allow us to successfully connect to our hosts, we can try out our very first command.

Ping all of the servers you configured by typing:


$ ansible -m ping all
---


        #
		host1 | success >> {
			"changed": false,
			"ping": "pong"
		}

		host3 | success >> {
			"changed": false,
			"ping": "pong"
		}

		host2 | success >> {
			"changed": false,
			"ping": "pong"
		}


This is a basic test to make sure that Ansible has a connection to all of its hosts.

The "all" means all hosts. We could just as easily specify a group:

$ ansible -m ping droplets
---


We could also specify an individual host:

$ ansible -m ping host1
---


We can specify multiple hosts by separating them with colons:

$ ansible -m ping host1:host2
---


The -m ping portion of the command is an instruction to Ansible to use the "ping" module. These are basically commands that you can run on your remote hosts. The ping module operates in many ways like the normal ping utility in Linux, but instead it checks for Ansible connectivity.

The ping module doesn't really take any arguments, but we can try another command to see how that works. We pass arguments into a script by typing -a.

The "shell" module lets us send a terminal command to the remote host and retrieve the results. For instance, to find out the memory usage on our host1 machine, we could use:


$ ansible -m shell -a 'free -m' host1
---


		#
		host1 | success | rc=0 >>
					 total       used       free     shared    buffers     cached
		Mem:          3954        227       3726          0         14         93
		-/+ buffers/cache:        119       3834
		Swap:            0          0          0



Conclusion

By now, you should have your Ansible server configured to communicate with the servers that you would like to control. We have verified that Ansible can communicate with each host and we have used the ansible command to execute simple tasks remotely.

Although this is useful, we have not covered the most powerful feature of Ansible in this article: Playbooks. We have set up a great foundation for working with our servers through Ansible, but the heavy lifting will be done in a future article, when we cover how to use Playbooks to automate configuration of your remote computers.


Comments
+++

June 1, 2014

In the section "Using Simple Ansible Commands," you say, "We can specify multiple hosts by separating them with colons." More precisely you can do the union, intersection, or difference of the machines or groups listed. The Ansible documents on this are a bit weak, http://docs.ansible.com/intro_patterns.html but I learned it from http://zaiste.net/2014/05/ansible_101/ . Look at the middle of the page for the section named Usage. "Groups can be combined A:B designates the union of groups A and B A:&B designates the intersection of groups A and B A:!B designates the difference, all from A without those in B"


October 25, 2014

Good introductory tutorial! I think it would be interesting to point that connecting and running the tasks as root might not be the best practice on a daily basis, as all commands will be executed as root.





Title: how-to-create-ansible-playbooks-to-automate-system-configuration-on-ubuntu
===
Source: https://www.digitalocean.com/community/tutorials/how-to-create-ansible-playbooks-to-automate-system-configuration-on-ubuntu

Added: Thu Dec  1 19:52:05 CET 2016
Created: PostedFebruary 7, 2014


Introduction
+++

Ansible is an easy configuration management system that can be used to automate and organize your system configuration tasks for a large network of computers. While some other configuration management systems require many different packages to be installed on the server and client systems, with Ansible, you only need to install a server component and have SSH access to the client machines.


In a previous guide, we discussed how to install the Ansible software and learn basic commands. In this guide, we will discuss Ansible playbooks, which are Ansible's way of creating automated scripts to configure client computers.

We will assume that you have a configured Ansible server and a few clients, just as we left off in the last tutorial. In our guide, the server is a Ubuntu 12.04 machine, and the clients that we are going to be configuring are also Ubuntu 12.04 machines, for ease of explanation.



What are Ansible Playbooks?
+++

Ansible playbooks are a way to send commands to remote computers in a scripted way. Instead of using Ansible commands individually to remotely configure computers from the command line, you can configure entire complex environments by passing a script to one or more systems.

Ansible playbooks are written in the YAML data serialization format. If you don't know what a data serialization format is, think of it as a way to translate a programmatic data structure (lists, arrays, dictionaries, etc) into a format that can be easily stored to disk. The file can then be used to recreate the structure at a later point. JSON is another popular data serialization format, but YAML is much easier to read.


Each playbook contains one or more plays, which map hosts to a certain function. Ansible does this through something called tasks, which are basically module calls.


Exploring a Basic Playbook
+++

Let's look at a basic playbook:



		#
		#
		---
		- hosts: droplets
		  tasks:
			- name: Installs nginx web server
			  apt: pkg=nginx state=installed update_cache=true
			  notify:
				- start nginx

		  handlers:
			- name: start nginx
			  service: name=nginx state=started


Let's break this down in sections so we can understand how these files are built and what each piece means.

The file starts with:


		#
		#
		---


This is a requirement for YAML to interpret the file as a proper document. YAML allows multiple "documents" to exist in one file, each separated by ---, but Ansible only wants one per file, so this should only be present at the top of the file.

YAML is very sensitive to white-space, and uses that to group different pieces of information together. You should use only spaces and not tabs and you must use consistent spacing for your file to be read correctly. Items at the same level of indentation are considered sibling elements.


Items that begin with a - are considered list items. Items that have the format of key: value operate as hashes or dictionaries. That's pretty much all there is to basic YAML.


YAML documents basically define a hierarchical tree structure with the containing elements further to the left.

On the second line, we have this:


		#
		#
		---
		- hosts: droplets


This is a list item in YAML as we learned above, but since it is at the left-most level, it is also an Ansible "play". Plays are basically groups of tasks that are performed on a certain set of hosts to allow them to fulfill the function you want to assign to them. Each play must specify a host or group of hosts, as we do here.

Next, we have a set of tasks:


		#
		#
		---
		- hosts: droplets
		  tasks:
			- name: Installs nginx web server
			  apt: pkg=nginx state=installed update_cache=true
			  notify:
				- start nginx



At the top level, we have "tasks:" at the same level as "hosts:". This contains a list (because it starts with a "-") which contains key-value pairs.

The first one, "name", is more of a description than a name. You can call this whatever you would like.

The next key is "apt". This is a reference to an Ansible module, just like when we use the ansible command and type something like:

$ ansible -m apt -a 'whatever' all
---


This module allows us to specify a package and the state that it should be in, which is "installed" in our case. The update-cache=true part tells our remote machine to update its package cache (apt-get update) prior to installing the software.

The "notify" item contains a list with one item, which is called "start nginx". This is not an internal Ansible command, it is a reference to a handler, which can perform certain functions when it is called from within a task. We will define the "start nginx" handler below.


		#
		#
		---
		- hosts: droplets
		  tasks:
			- name: Installs nginx web server
			  apt: pkg=nginx state=installed update_cache=true
			  notify:
				- start nginx

		  handlers:
			- name: start nginx
			  service: name=nginx state=started


The "handlers" section exists at the same level as the "hosts" and "tasks". Handlers are just like tasks, but they only run when they have been told by a task that changes have occurred on the client system.


For instance, we have a handler here that starts the Nginx service after the package is installed. The handler is not called unless the "Installs nginx web server" task results in changes to the system, meaning that the package had to be installed and wasn't already there.

We can save this playbook into a file called something like "nginx.yml".

Just for some context, if you were to write this same file in JSON, it might look something like this:


		#
		#
		[
			{
				"hosts": "droplets",
				"tasks": [
					{
						"name": "Installs nginx web server",
						"apt": "pkg=nginx state=installed update_cache=true",
						"notify": [
							"start nginx"
						]
					}
				],
				"handlers": [
					{
						"name": "start nginx",
						"service": "name=nginx state=started"
					}
				]
			}
		]



As you can see, YAML is much more compact and most people would say more readable.


MY_NOTE:
Two perl scripts, first just a proof of concept.
Second works on the example playbook given above, and translates it to JSON, but it had problems with tabs, and so i had to remove tabs, and use spaces instead as indentation in YAML.



First script.

		#
		$ cat yaml2json.pl
		#!/usr/bin/env perl
		# Name:
		# Version:

		use strict;
		use warnings;

		use YAML;
		use JSON;

		# Load a YAML hash containing a scalar ref as a value.
		my ($hashref) = Load(<<'END_YAML');
		---
		bar: ref
		foo: 1
		END_YAML

		use Data::Dump;
		dd $hashref;

		my $json_text = encode_json($hashref);


Output:

		#
		$ perl yaml2json.pl
		{ bar => "ref", foo => 1 }


Second script.


		#
		$ cat yaml2json_2.pl
		#!/usr/bin/env perl
		# Name:
		# Version:

		use strict;
		use warnings;

		use YAML;
		use JSON;

		my $slurped;

		{
		local $/ = undef;
		$slurped = <DATA>;
		}

		# Load a YAML hash containing a scalar ref as a value.
		my ($hashref) = Load($slurped);

		use Data::Dump;
		dd $hashref;

		my $json_text = encode_json($hashref);
		__DATA__
		---
		- hosts: droplets
		  tasks:
			- name: Installs nginx web server
			  apt: pkg=nginx state=installed update_cache=true
			  notify:
				- start nginx

		  handlers:
			- name: start nginx
			  service: name=nginx state=started




Output:

		
		#
		$ perl yaml2json_2.pl
		[
		  {
			handlers => [
						  { name => "start nginx", service => "name=nginx state=started" },
						],
			hosts    => "droplets",
			tasks    => [
						  {
							apt => "pkg=nginx state=installed update_cache=true",
							name => "Installs nginx web server",
							notify => ["start nginx"],
						  },
						],
		  },
		]


The source of the first script.
http://stackoverflow.com/questions/25633657/perl-yaml-to-json#25633718

Slurp whole YAML into scalar variable, found useful example on page below.
https://perlmaven.com/slurp



Running an Ansible Playbook
+++

Once you have a playbook built, you can call it easily using this format:

$ ansible-playbook playbook.yml
---

For instance, if we wanted to install and start up Nginx on all of our droplets, we could issue this command:

$ ansible-playbook nginx.yml
---

Since the playbook itself specifies the hosts that it should run against (namely, the "droplets" group we created in the last tutorial), we do not have to specify a host to run against.

However, if we would like to filter the host list to only apply to one of those hosts, we can add a flag to specify a subset of the hosts in the file:


$ ansible-playbook -l host_subset playbook.yml
---

$ ansible-playbook -l host3 nginx.yml
---


Adding Features to the Playbook
+++

Right now our playbook looks like this:


		#
		#
		---
		- hosts: droplets
		  tasks:
			- name: Installs nginx web server
			  apt: pkg=nginx state=installed update_cache=true
			  notify:
				- start nginx

		  handlers:
			- name: start nginx
			  service: name=nginx state=started


It is simple and it works, but all it is doing is installing a piece of software and starting it. That's not very beneficial by itself.

We can start to expand the functionality by adding tasks to our playbook.


Add a Default Index File
+++


We can tell it to transfer a file from our Ansible server onto the host by adding some lines like this:

		#
		#
		---
		- hosts: droplets
		  tasks:
			- name: Installs nginx web server
			  apt: pkg=nginx state=installed update_cache=true
			  notify:
				- start nginx

			- name: Upload default index.html for host
			  copy: src=static_files/index.html dest=/usr/share/nginx/www/ mode=0644

		  handlers:
			- name: start nginx
			  service: name=nginx state=started


We can then make a directory called static_files in our current directory and place an index.html file inside.


		#
		mkdir static_files
		nano static_files/index.html


Inside of this file, let's just create a basic html structure:


		#
		<html>
		  <head>
			<title>This is a sample page</title>
		  </head>
		  <body>
			<h1>Here is a heading!</h1>
			<p>Here is a regular paragraph.  Wow!</p>
		  </body>
		</html>



Save and close the file.

Now, when we re-run the playbook, Ansible will check each task. It will see that Nginx is already installed on the host, so it will leave it be. It will see the new task section and replace the default index.html file with the one from our server.


Registering Results
+++

When you are installing and configuring services manually, it is almost always necessary to know whether your actions were successful or not. We can cook this functionality into our playbooks by using "register".

For each task, we can optionally register its result (failure or success) in a variable that we can check later on.

When using this functionality, we also have to tell Ansible to ignore errors for that task, since normally it aborts the playbook execution for that host if any trouble happens.

So, if we want to check whether a task has failed or not to decide on subsequent steps, we can use the register functionality.


For instance, we could tell our playbook to upload an index.php file if it exists. If that task fails, we could instead try to upload an index.html file. We will check for the failure condition in the other task because we only want to upload the HTML file if the PHP file fails:


		#
		#
		---
		- hosts: droplets
		  tasks:
			- name: Installs nginx web server
			  apt: pkg=nginx state=installed update_cache=true
			  notify:
				- start nginx

			- name: Upload default index.php for host
			  copy: src=static_files/index.php dest=/usr/share/nginx/www/ mode=0644
			  register: php
			  ignore_errors: True

			- name: Remove index.html for host
			  command: rm /usr/share/nginx/www/index.html
			  when: php|success

			- name: Upload default index.html for host
			  copy: src=static_files/index.html dest=/usr/share/nginx/www/ mode=0644
			  when: php|failed

		  handlers:
			- name: start nginx
			  service: name=nginx state=started


Note: We have not configured our host to handle PHP files at this time, so even if you did upload a PHP file, it would not be processed correctly.

This new version tries to upload a PHP index file to the host. It registers the success of the operation into a variable called "php".

If this operation was successful, the task to remove the index.html file is run next.

If the operation failed, the index.html file is uploaded instead.


Conclusion

Now, you should have a good handle on how to automate complex tasks using Ansible. This is a basic example of how you can begin to build your configuration library.

Combining host and group definitions as we learned about in the first tutorial, and using available variables to fill in information, we can begin to put together complex computer systems that interact with each other. In a future article, we will discuss how to implement variables into our playbooks and create roles to help manage complex tasks.


Comments
+++

March 17, 2014

According to the ansible docs(http://docs.ansible.com/apt_module.html) the command equivalent to apt-get update is actually update_cache=yes rather than update_cache=true Otherwise, I like the tutorial.




Title: how-to-use-ansible-roles-to-abstract-your-infrastructure-environment
===
Source: https://www.digitalocean.com/community/tutorials/how-to-use-ansible-roles-to-abstract-your-infrastructure-environment

Added: Fri Dec  2 16:00:35 CET 2016
Created: PostedFebruary 11, 2014


Introduction
+++

Ansible is an easy to use configuration management system that can assist you in configuring large numbers of servers from a single machine. You can automate complex tasks and easily add machines to your infrastructure without too much trouble.

In previous articles, we discussed how to install and configure Ansible and how to create playbooks to automate system configuration. In this guide, we will discuss how to use Ansible roles to allow you to break up configuration into more modular steps.


We will assume that you have Ansible installed on one Ubuntu 12.04 VPS as we demonstrated in the previous guides. You will also need one or more other computers configured as hosts within the Ansible configuration.


What is an Ansible Role?
+++


You've been exposed to how Ansible can interact with configured clients from the command line with the ansible command, and how you can automate configuration with playbooks run through the ansible-playbook command. Where do roles fit into this scheme?

Simply put, roles are a further level of abstraction that can be useful for organizing playbooks. As you add more and more functionality and flexibility to your playbooks, they can become unwieldy and difficult to maintain as a single file. Roles allow you to create very minimal playbooks that then look to a directory structure to determine the actual configuration steps they need to perform.

Organizing things into roles also allows you to reuse common configuration steps between different types of servers. This is already possible by "including" other files within a playbook, but with roles, these types of links between files are automatic based on a specific directory hierarchy.

In general, the idea behind roles is to allow you to define what a server is supposed to do, instead of having to specify the exact steps needed to get a server to act a certain way.


Creating Role Framework
+++

In order for Ansible to correctly handle roles, we need to build a directory structure that it can find and understand. We can do this by creating a "roles" directory in our working directory for Ansible.

We're assuming here that you've been using your user's home directory as the Ansible working directory. You should change to whatever actual directory you are keeping your Ansible configuration in.

We are going to create a directory called "roles" where Ansible will look for our roles.

mkdir roles
---

        #
        cd ~
        mkdir roles
        cd roles


Within this directory, we will define our roles. We will basically create a directory for each role that we will create. Since we are going to replicate our Nginx playbook, let's create an Nginx role:

mkdir nginx
---

		#
		mkdir nginx
		cd nginx


Within this directory, we create another set of directories that will help us separate the different sections of a normal playbook. Create these directories now:


mkdir defaults files handlers meta templates tasks vars
---

		#
		mkdir defaults files handlers meta templates tasks vars 


These are the directories that will contain all of the code to implement our configuration. You may not use all of the directories, so in real practice, you may not need to create all of these directories.


This is what they are all for:


    - files: This directory contains regular files that need to be transferred to the hosts you are configuring for this role. This may also include script files to run.
    - handlers: All handlers that were in your playbook previously can now be added into this directory.
    - meta: This directory can contain files that establish role dependencies. You can list roles that must be applied before the current role can work correctly.
    - templates: You can place all files that use variables to substitute information during creation in this directory.
    - tasks: This directory contains all of the tasks that would normally be in a playbook. These can reference files and templates contained in their respective directories without using a path.
    - vars: Variables for the roles can be specified in this directory and used in your configuration files.

Within all of the directories but the "files" and "templates", if a file called main.yml exists, its contents will be automatically added to the playbook that calls the role.


Abstracting a Playbook to a Role
+++

For many playbooks, it would make more sense to implement the functionality as a role. We can turn our Nginx playbook from the last article into a role to organize things better.

We should already have the roles/nginx/{subdirectories} structure set up from the last section. Now, we need to create some main.yml files in our structure.


Creating the Tasks main.yml File
+++

We'll start with the tasks subdirectory. Move to that directory now:


		#
		cd ~/roles/nginx/tasks


Now, we need to copy the nginx.yml file into this directory:


		#
		cp ~/nginx.yml main.yml


Now, we need to edit the main file and remove everything that is not a tasks:


		#
		nano main.yml


The file should look like this when you begin:



		#
		#
		---
		- hosts: droplets
		  tasks:
			- name: Installs nginx web server
			  apt: pkg=nginx state=installed update_cache=true
			  notify:
				- start nginx

			- name: Upload default index.php for host
			  copy: src=static_files/index.php dest=/usr/share/nginx/www/ mode=0644
			  register: php
			  ignore_errors: True

			- name: Remove index.html for host
			  command: rm /usr/share/nginx/www/index.html
			  when: php|success

			- name: Upload default index.html for host
			  copy: src=static_files/index.html dest=/usr/share/nginx/www/ mode=0644
			  when: php|failed

		  handlers:
			- name: start nginx
			  service: name=nginx state=started


We only want to keep the lines that are red. 


		#
		- name: Installs nginx web server
		  apt: pkg=nginx state=installed update_cache=true
		  notify:
			- start nginx

		- name: Upload default index.php for host
		  copy: src=static_files/index.php dest=/usr/share/nginx/www/ mode=0644
		  register: php
		  ignore_errors: True

		- name: Remove index.html for host
		  command: rm /usr/share/nginx/www/index.html
		  when: php|success

		- name: Upload default index.html for host
		  copy: src=static_files/index.html dest=/usr/share/nginx/www/ mode=0644
		  when: php|failed




Furthermore, we can remove the extraneous spaces to the left of our tasks. After our changes, our new tasks/main.yml file will look like this:


		#
		#
		---
		- name: Installs nginx web server
		  apt: pkg=nginx state=installed update_cache=true
		  notify:
			- start nginx

		- name: Upload default index.php for host
		  copy: src=static_files/index.php dest=/usr/share/nginx/www/ mode=0644
		  register: php
		  ignore_errors: True

		- name: Remove index.html for host
		  command: rm /usr/share/nginx/www/index.html
		  when: php|success

		- name: Upload default index.html for host
		  copy: src=static_files/index.html dest=/usr/share/nginx/www/ mode=0644
		  when: php|failed



As you can see, this is a lot easier to read in terms of just recognizing the steps that are to be performed.

One additional change that we should make is how we references external files in our configuration. Our src lines reference a "static_files" directory. This is unnecessary if we place all of our static files in the "files" subdirectory. Ansible will find them automatically.

When we change those lines, our finished tasks/main.yml file looks like this:


		#
		#
		---
		- name: Installs nginx web server
		  apt: pkg=nginx state=installed update_cache=true
		  notify:
			- start nginx

		- name: Upload default index.php for host
		  copy: src=index.php dest=/usr/share/nginx/www/ mode=0644
		  register: php
		  ignore_errors: True

		- name: Remove index.html for host
		  command: rm /usr/share/nginx/www/index.html
		  when: php|success

		- name: Upload default index.html for host
		  copy: src=index.html dest=/usr/share/nginx/www/ mode=0644
		  when: php|failed


Save and close the file when you are finished.


Creating the Handlers main.yml File
+++

Now that we have the bulk of the playbook in the tasks/main.yml file, we need to move the handlers section into a file located at handlers/main.yml.

Copy the nginx.yml file again, this time into the handlers directory:


		#
		cd ~/roles/nginx/handlers
		cp ~/nginx.yml main.yml


Again, open the file in your text editor:


		#
		nano main.yml


The parts that we need to keep are in red again:


		#
		#
		---
		- hosts: droplets
		  tasks:
			- name: Installs nginx web server
			  apt: pkg=nginx state=installed update_cache=true
			  notify:
				- start nginx

			- name: Upload default index.php for host
			  copy: src=static_files/index.php dest=/usr/share/nginx/www/ mode=0644
			  register: php
			  ignore_errors: True

			- name: Remove index.html for host
			  command: rm /usr/share/nginx/www/index.html
			  when: php|success

			- name: Upload default index.html for host
			  copy: src=static_files/index.html dest=/usr/share/nginx/www/ mode=0644
			  when: php|failed

		  handlers:
			- name: start nginx
			  service: name=nginx state=started



Remove the whitespace from before the handlers also. In the end, the file should look like this:


		#
		#
		---
		- name: start nginx
		  service: name=nginx state=started


Save and close the file when you are finished.


Finishing Up
+++

Since our original playbook was very simple, we're almost done.

First, we need to move the index.html page (and the index.php page if you created one) out of the ~/static_files directory and put them into the ~/roles/nginx/files directory:


		#
		cp ~/static_files/* ~/roles/nginx/files


If our role depended on another role, we could add a file in the meta directory called main.yml. This file might specify that this role depends on a role called "apt".

If our role depended on a role called "apt", the file at ~/roles/nginx/meta/main.yml might look like this:


		#
		#
		---
		dependencies:
		  - { role: apt }


This would take the "apt" role and place the information from that role before our Nginx information so that our role has its proper dependencies prior to starting.

We said earlier that there is a "vars" directory that can be used to set variables for our role. While it is possible to configure default parameters for a role through a vars/main.yml file, this is usually not recommended, because it makes the details of your configuration reside within the roles hierarchy.


Usually, you want to specify your details outside of the role so that you can easily share the role structure without worrying about leaking information. Also, variables declared within a role are easily overridden by variables in other locations, so they are not very strong to begin with.

By now, you may be wondering why we have to organize our information into directories, when most of our directories only contain a single main.yml file. Why aren't we creating tasks.yml files instead of tasks/main.yml?

The answer is that we are only using the minimum amount of files. The main.yml files are the ones picked up automatically by Ansible, but we can include additional files easily by using the include functionality.

If we had an additional task file used to configure SSL for some of our hosts located at tasks/ssl.yml, we could call it like this:


		#
		#
		. . .
		tasks:
		  - include: roles/nginx/tasks/ssl.yml


Create a Skeleton Playbook
+++

Now that we have configured our role structure, we can call all of the functionality with a very simple playbook.

This allows us to use playbooks to declare what a server is supposed to do, not what steps must happen to make it behave how we want it to.

Outside of the entire role structure, in our working directory (our home directory in this example), we can create a playbook file.


		#
		cd ~
		nano play.yml


Inside of this file, we need very little information. First, we have not defined any hosts, so that goes here. Next, we just declare the role we are using:


		#
		#
		---
		- hosts: droplets
		  roles:
			- role: nginx


Save and close the file. This is our entire playbook. As you can see, it cleans everything up and allows us to concentrate on core functionality. If we had multiple roles configured, we could simply list what different things we want our server to do.

For instance, if we had roles to set up a WordPress server, we might have a playbook that looks like this:


		#
		#
		---
		- hosts: wordpress_hosts
		  roles:
			- nginx
			- php
			- mysql
			- wordpress


As you can see, this allows us to be very succinct about what we want from a server. Since in the end, we use a playbook to call a role, the command syntax is exactly the same:


$ ansible-playbook play.yml
---


Conclusion

Ansible roles are an optional feature to take advantage of, but if you plan on using Ansible extensively, it is highly recommended that you explore this functionality. Not only will it keep your host-level configuration clean and readable, it will also allow you to easily reuse code and implement your changes in a modular fashion.


Comments
+++

February 28, 2014

Great article, but you are missing "defaults" directory in which you can add default values for variables which basically get overridden by everything else. 





Title: how-to-create-an-ansible-playbook-to-automate-drupal-installation-on-ubuntu-14-04
===
Source: https://www.digitalocean.com/community/tutorials/how-to-create-an-ansible-playbook-to-automate-drupal-installation-on-ubuntu-14-04

Added: Fri Dec  2 19:42:42 CET 2016
Created: PostedDecember 23, 2014


Introduction
+++

Ansible is a configuration management tool that system administrators use to automate infrastructure management activities.

Ansible uses only SSH to run commands remotely, and thus does not need an agent on the remote server. This makes Ansible preferable over other popular tools like Puppet or Chef when you don't want to install agents on the managed servers.

Moreover, it is much easier to get started with Ansible because it uses YAML (Yet Another Markup Language) which is simpler than the more powerful programming languages that other tools use.

Drupal is a popular CMS whose installation is time-consuming, but easy to automate. In this tutorial, we are going to create an Ansible Playbook that automates the installation and configuration of Drupal and all its dependencies on systems that run Ubuntu 14.04. 


Prerequisites
+++

You will need the following:

    - Ubuntu 14.04 server (which is accessible over SSH); this server will run Ansible and a local copy of Drupal
    - Optional: Additional Ubuntu 14.04 servers where you want to install Drupal
    - A sudo user on each server; you should use the same username and same password for each server where you want to install Drupal
    - A basic understanding of how a Drupal installation works. You can refer to How To Install Drupal on an Ubuntu 14.04 Server with Apache, although you do not need to pre-install Drupal



Step 1  Install Ansible
+++

Update the package lists.
Install Ansible.


		#
		sudo apt-get update
		sudo apt-get install ansible


Step 2  Create a Directory for the Playbook
+++

Ansible's instruction sets are called playbooks. It's a good idea to store all your playbooks in a single directory. Create a directory named MyPlaybooks.


		#
		mkdir ~/MyPlaybooks


Let us name our playbook drupal_setup. Create a new directory named drupal_setup.


		#
		mkdir ~/MyPlaybooks/drupal_setup


Step 3  Create a hosts File
+++

Each playbook usually has a hosts file that contains names of the servers that it should use.

In this tutorial, we are going to install Drupal on localhost and one other server, drupal_server. You are free to add more servers to this file. Remember, every server you add should be accessible over SSH.

Use nano to create and edit a file named hosts.


		#
		nano ~/MyPlaybooks/drupal_setup/hosts

Let it have the following contents:


		#
		[drupal_hosts]
		localhost
		drupal_server_ip

MY_NOTE:
I created the "hosts" file with the following content.


		#
		[drupal_hosts]
		test_machine ansible_host=127.0.0.1 ansible_port=2222 ansible_user=vagrant

You should replace drupalserverip with your second server's IP address. You can list as many IP addresses here as you want; you can use this playbook to install Drupal on any number of Ubuntu 14.04 servers.


    Note: The hosts file is the file you should update if you want to reuse this playbook in the future to configure more Drupal servers. Note that you should remove the already-configured servers from the list, and add your new server IPs, before you re-run the playbook.

Save and close the file.


Step 4  Create a Role to apt-get update
+++

Create a new directory to store all the roles of the Playbook.


		#
		mkdir ~/MyPlaybooks/drupal_setup/roles


We need to apt-get update the servers before doing anything else, so create a directory for the role update.


		#
		mkdir ~/MyPlaybooks/drupal_setup/roles/update


Each role has one or more tasks. Create a directory named tasks to hold all tasks associated with this role.


		#
		mkdir ~/MyPlaybooks/drupal_setup/roles/update/tasks


Use nano to create and edit a new task file named main.yml. This is the file that tells Ansible what to do when it executes this role.


		#
		nano ~/MyPlaybooks/drupal_setup/roles/update/tasks/main.yml


In this file, use Ansible's apt module to update the system:


		#
		#
		---
		- name: apt-get update the server
		  apt: update_cache=yes


Make sure your file doesn't have any extra whitespace; Ansible is picky about this. Save and close the file.


Step 5 — Create a Role to Set Up PHP
+++

Create a directory for the role php.


		#
		mkdir ~/MyPlaybooks/drupal_setup/roles/php

Create the tasks directory for this role:


		#
		mkdir ~/MyPlaybooks/drupal_setup/roles/php/tasks


Drupal needs a web server which is configured to use PHP. In this tutorial, we use Apache. When we install PHP, Apache is installed automatically, so we don't need any extra commands for it.

Use nano to create and edit the main.yml for the php role.


		#
		nano ~/MyPlaybooks/drupal_setup/roles/php/tasks/main.yml


Use Ansible's apt module to install PHP5 (and the packages it depends on), and the PHP5 GD library. Add the following to the file:


		#
		#
		---
		- name: Install PHP and associated packages
		  apt: name=php5 state=latest

		- name: Install PHP GD library
		  apt: name=php5-gd state=latest
		  notify:
			- Restart Apache


Apache has to be restarted after the PHP GD library is installed. Therefore, this role also needs a handler.

All handlers of a role are stored in a separate directory. Create a directory named handlers for the current role.


		#
		mkdir ~/MyPlaybooks/drupal_setup/roles/php/handlers


Use nano to create and edit the main.yml file.


		#
		nano ~/MyPlaybooks/drupal_setup/roles/php/handlers/main.yml

Add the following code to it:


		#
		#
		---
		- name: Restart Apache
		  service: name=apache2 state=restarted

You're done with the PHP and Apache setup.



Step 6  Create a Role to Set Up MySQL
+++

Drupal needs a database to store settings and content. In this tutorial, we use MySQL.

Create directories for this role and its tasks.


		#
		mkdir -p ~/MyPlaybooks/drupal_setup/roles/mysql/tasks


The first task of this role installs MySQL and its dependencies. Use nano to create and edit a file named setup.yml.


		#
		nano ~/MyPlaybooks/drupal_setup/roles/mysql/tasks/setup.yml


In this file, we will tell Ansible to use the apt module again to install:


    - mysql-server
    - libapache2-mod-auth-mysql
    - php5-mysql


So, add the following to the file:


		#
		#
		---
		- name: Install MySQL server
		  apt: name=mysql-server state=latest

		- name: Install Apache module for MySQL authentication
		  apt: name=libapache2-mod-auth-mysql state=latest

		- name: Install MySQL module for PHP
		  apt: name=php5-mysql state=latest


Our role has one more tasks file. As Drupal needs its own MySQL database and database user, we will create a separate tasks file to create them. Use nano to create and edit a file named create_db.yml.


