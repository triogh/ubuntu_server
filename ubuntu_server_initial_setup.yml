---
- name: Playbook to bootstrap ubuntu server as desktop
  hosts: localhost
  connection: local
  gather_facts: yes

# Run only once
#  vars_prompt:
#    - name: "network_interface"
#      prompt: "What network interface you want to configure?"
#      private: no
#    - name: "network_interface_ip_address"
#      prompt: "IP address of the network interface?"
#      private: no
#    - name: "network_gateway"
#      prompt: "What is the IP address of the network gateway?"
#      private: no
#    - name: "nameserver_1"
#      prompt: "IP address of the first nameserver?"
#      private: no
#    - name: "nameserver_2"
#      prompt: "IP address of the second nameserver?"
#      private: no

  tasks:
   - name: Add apt signing key for Google
     become: True
     apt_key: url=https://dl.google.com/linux/linux_signing_key.pub state=present

   - name: Add "Google Chrome" repository
     become: True
     apt_repository: repo='deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' state=present
     when: ansible_distribution == "Ubuntu" or ansible_distribution == "Debian"

   - name: Equivalent of "apt-get update" 
     become: True
     apt: update_cache=yes cache_valid_time=3600


   - name: Install awesomeWM and xinit
     become: True
     apt: name={{ item }} state=present
     with_items:
      - awesome
      - libcairo-gobject2
      - xinit

   - name: Check if "~user/.xinitrc" file exists
     stat: path={{ ansible_env.HOME }}/.xinitrc
     register: xinitrc

   - name: Create "~user/.xinitrc" file, if not exists
     file: path={{ ansible_env.HOME }}/.xinitrc state=touch
     when: not xinitrc.stat.exists

   - name: Add line "exec awesome" to "~user/.xinitrc" file, if not present
     lineinfile: dest={{ ansible_env.HOME }}/.xinitrc line="exec awesome"


   - name: Install alsa-base and pulseaudio packages
     become: True
     apt: name={{ item }} state=present
     with_items:
      - alsa-base
      - pulseaudio


   - name: Install some userland packages
     become: True
     apt: name={{ item }} state=latest
     with_items:
      - vlc
      - mpv
      - clementine
      - cmus
      - fatsort
      - comix
      - calibre
      - gpicview
      - libreoffice
      - impressive
      - firefox
      - google-chrome-stable
      - chromium-browser
      - nload
      - tmux
      - terminator
      - nmap
      - lftp
      - tree
      - htop
      - perl-doc
      - ranger
      - lynx
      - elinks
      - highlight
      - atool
      - mediainfo
      - vim
      - redshift
      - workrave
      - clipit
      - dict
      - unattended-upgrades
      - aptitude
      - ufw
      - fail2ban
      - etckeeper
      - checkinstall
      - ntp
      - ntp-doc
      - git
      - weechat
      - alpine
      - slrn
      - newsbeuter
      - autofs
      - wine
      - smartmontools
      - libcpanplus-perl
      - cpanminus
      - pv
      - bluez
      - rfkill
      - lynx
      - html2text
      - evince
      - xbacklight

   - include: task_adds_virtualization.yml 
   - include: task_adds_nfs_client_related_pkgs.yml
   - include: task_adds_python3_related_pkgs.yml

   - name: Equivalent of "aptitude safe-upgrade"
     become: True
     apt: upgrade=safe
     tags: upgrade-pkgs



   - name: Setup ufw
     become: True
     ufw: state=enabled policy=deny



   - name: Check if "/etc/ssh/sshd_config" file exists
     stat: path=/etc/ssh/sshd_config
     register: sshd_config

   - name: Disallow password authentication
     become: True
     lineinfile: dest=/etc/ssh/sshd_config
                 regexp="^PasswordAuthentication"
                 line="PasswordAuthentication no"
                 state=present
     notify: Restart ssh
     when: sshd_config.stat.exists

   - name: Disallow root SSH access
     become: True
     lineinfile: dest=/etc/ssh/sshd_config
                 regexp="^PermitRootLogin"
                 line="PermitRootLogin no"
                 state=present
     notify: Restart ssh
     when: sshd_config.stat.exists



   - name: Check if "~user/.vimrc" exists
     stat: path={{ ansible_env.HOME }}/.vimrc
     register: vimrc

   - name: Check if "~user/.vim/templates/pl.template" exists
     stat: path={{ ansible_env.HOME }}/.vim/templates/pl.template
     register: pl_template

   - name: Create temp directory for vim repo using mktemp
     command: mktemp -d
     register: tempdir_vim_repo
     when: (not vimrc.stat.exists) or (not pl_template.stat.exists)

   - name: Git checkout vim repo from github to temp directory
     git: repo=https://github.com/triogh/vim dest={{ tempdir_vim_repo.stdout  }}
     when: (not vimrc.stat.exists) or (not pl_template.stat.exists)

   - name: Copy "vimrc" from temp repo directory to user home, if not exists
     copy: remote_src=True src={{ tempdir_vim_repo.stdout }}/vimrc dest={{ ansible_env.HOME }}/.vimrc
     when: not vimrc.stat.exists

   - name: Create "~user/.vim/templates/" directory, if not exists
     file: path={{ ansible_env.HOME }}/.vim/templates state=directory mode=0755
     when: not pl_template.stat.exists

   - name: Copy "pl.template" from temp repo directory to user home, if not exists
     copy: remote_src=True src={{ tempdir_vim_repo.stdout }}/pl.template dest={{ ansible_env.HOME }}/.vim/templates/pl.template
     when: not pl_template.stat.exists

   - name: Remove temp repo directory {{ tempdir_vim_repo.stdout }}, if exists
     file: path={{ tempdir_vim_repo.stdout }} state=absent
     when: (not vimrc.stat.exists) or (not pl_template.stat.exists)



   - name: Add "~user/.ansible.cfg" with block, if not exists
     blockinfile: 
       create: yes 
       dest: "{{ ansible_env.HOME }}/.ansible.cfg"
       block: |
         [defaults]
         log_path = {{ ansible_env.HOME }}/ansible.log


   - name: Just a debug example 
     debug: msg="The $HOME of the user running the playbook is {{ ansible_env.HOME }}"
     tags: 
       - debug
       - test

   - name: Another debug example
     debug: var=ansible_version
     tags:
       - debug
       - test

# Run only once
#   - name: network_interface
#     debug: var=network_interface
#   - name: network_interface_ip_address
#     debug: var=network_interface_ip_address
#   - name: network_gateway
#     debug: var=network_gateway
#   - name: nameserver_1
#     debug: var=nameserver_1
#   - name: nameserver_2
#     debug: var=nameserver_2
#
#   - name: Write "/etc/network/interfaces" with static IP and nameservers 
#     become: True
#     template: src=etc_network_interfaces.j2 dest=/etc/network/interfaces
#     notify:
#       - restart networking



  handlers:
   - name: Restart ssh
     become: True
     service: name=ssh state=restarted

   - name: restart networking
     become: True
     service: name=networking state=restarted
